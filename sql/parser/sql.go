// Code generated by go yacc.
//line sql.y:6
package parser

import __yyfmt__ "fmt"

//line sql.y:6
import (
	"strconv"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*tokenizer).parseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*tokenizer).allowComments = allow
}

func forceEOF(yylex interface{}) {
	yylex.(*tokenizer).forceEOF = true
}

func parseInt(yylex yyLexer, s string) (int, bool) {
	i, err := strconv.Atoi(s)
	if err != nil {
		yylex.Error(err.Error())
		return -1, false
	}
	return i, true
}

//line sql.y:36
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	byt         byte
	str         string
	str2        []string
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
	tableDefs   TableDefs
	tableDef    TableDef
	columnType  ColumnType
	intVal      int
	intVal2     [2]int
	boolVal     bool
}

const tokLexError = 57346
const tokSelect = 57347
const tokInsert = 57348
const tokUpdate = 57349
const tokDelete = 57350
const tokFrom = 57351
const tokWhere = 57352
const tokGroup = 57353
const tokHaving = 57354
const tokOrder = 57355
const tokBy = 57356
const tokLimit = 57357
const tokOffset = 57358
const tokFor = 57359
const tokAll = 57360
const tokDistinct = 57361
const tokAs = 57362
const tokExists = 57363
const tokIn = 57364
const tokIs = 57365
const tokLike = 57366
const tokBetween = 57367
const tokNull = 57368
const tokAsc = 57369
const tokDesc = 57370
const tokValues = 57371
const tokInto = 57372
const tokDuplicate = 57373
const tokKey = 57374
const tokDefault = 57375
const tokSet = 57376
const tokLock = 57377
const tokInt = 57378
const tokTinyInt = 57379
const tokSmallInt = 57380
const tokMediumInt = 57381
const tokBigInt = 57382
const tokInteger = 57383
const tokReal = 57384
const tokDouble = 57385
const tokFloat = 57386
const tokDecimal = 57387
const tokNumeric = 57388
const tokDate = 57389
const tokTime = 57390
const tokDateTime = 57391
const tokTimestamp = 57392
const tokChar = 57393
const tokVarChar = 57394
const tokBinary = 57395
const tokVarBinary = 57396
const tokText = 57397
const tokTinyText = 57398
const tokMediumText = 57399
const tokLongText = 57400
const tokBlob = 57401
const tokTinyBlob = 57402
const tokMediumBlob = 57403
const tokLongBlob = 57404
const tokBit = 57405
const tokEnum = 57406
const tokID = 57407
const tokString = 57408
const tokNumber = 57409
const tokValueArg = 57410
const tokComment = 57411
const tokLE = 57412
const tokGE = 57413
const tokNE = 57414
const tokNullSafeEqual = 57415
const tokUnion = 57416
const tokMinus = 57417
const tokExcept = 57418
const tokIntersect = 57419
const tokJoin = 57420
const tokStraightJoin = 57421
const tokLeft = 57422
const tokRight = 57423
const tokInner = 57424
const tokOuter = 57425
const tokCross = 57426
const tokNatural = 57427
const tokUse = 57428
const tokForce = 57429
const tokOn = 57430
const tokUsing = 57431
const tokAnd = 57432
const tokOr = 57433
const tokNot = 57434
const tokUnary = 57435
const tokCase = 57436
const tokWhen = 57437
const tokThen = 57438
const tokElse = 57439
const tokEnd = 57440
const tokCreate = 57441
const tokAlter = 57442
const tokDrop = 57443
const tokRename = 57444
const tokTruncate = 57445
const tokShow = 57446
const tokDatabase = 57447
const tokDatabases = 57448
const tokTable = 57449
const tokTables = 57450
const tokIndex = 57451
const tokView = 57452
const tokColumns = 57453
const tokFull = 57454
const tokTo = 57455
const tokIgnore = 57456
const tokIf = 57457
const tokUnique = 57458
const tokUnsigned = 57459
const tokPrimary = 57460

var yyToknames = []string{
	"tokLexError",
	"tokSelect",
	"tokInsert",
	"tokUpdate",
	"tokDelete",
	"tokFrom",
	"tokWhere",
	"tokGroup",
	"tokHaving",
	"tokOrder",
	"tokBy",
	"tokLimit",
	"tokOffset",
	"tokFor",
	"tokAll",
	"tokDistinct",
	"tokAs",
	"tokExists",
	"tokIn",
	"tokIs",
	"tokLike",
	"tokBetween",
	"tokNull",
	"tokAsc",
	"tokDesc",
	"tokValues",
	"tokInto",
	"tokDuplicate",
	"tokKey",
	"tokDefault",
	"tokSet",
	"tokLock",
	"tokInt",
	"tokTinyInt",
	"tokSmallInt",
	"tokMediumInt",
	"tokBigInt",
	"tokInteger",
	"tokReal",
	"tokDouble",
	"tokFloat",
	"tokDecimal",
	"tokNumeric",
	"tokDate",
	"tokTime",
	"tokDateTime",
	"tokTimestamp",
	"tokChar",
	"tokVarChar",
	"tokBinary",
	"tokVarBinary",
	"tokText",
	"tokTinyText",
	"tokMediumText",
	"tokLongText",
	"tokBlob",
	"tokTinyBlob",
	"tokMediumBlob",
	"tokLongBlob",
	"tokBit",
	"tokEnum",
	"tokID",
	"tokString",
	"tokNumber",
	"tokValueArg",
	"tokComment",
	"tokLE",
	"tokGE",
	"tokNE",
	"tokNullSafeEqual",
	"'('",
	"'='",
	"'<'",
	"'>'",
	"'~'",
	"tokUnion",
	"tokMinus",
	"tokExcept",
	"tokIntersect",
	"','",
	"tokJoin",
	"tokStraightJoin",
	"tokLeft",
	"tokRight",
	"tokInner",
	"tokOuter",
	"tokCross",
	"tokNatural",
	"tokUse",
	"tokForce",
	"tokOn",
	"tokUsing",
	"tokAnd",
	"tokOr",
	"tokNot",
	"'&'",
	"'|'",
	"'^'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'.'",
	"tokUnary",
	"tokCase",
	"tokWhen",
	"tokThen",
	"tokElse",
	"tokEnd",
	"tokCreate",
	"tokAlter",
	"tokDrop",
	"tokRename",
	"tokTruncate",
	"tokShow",
	"tokDatabase",
	"tokDatabases",
	"tokTable",
	"tokTables",
	"tokIndex",
	"tokView",
	"tokColumns",
	"tokFull",
	"tokTo",
	"tokIgnore",
	"tokIf",
	"tokUnique",
	"tokUnsigned",
	"tokPrimary",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 272
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 686

var yyAct = []int{

	107, 438, 392, 315, 445, 178, 67, 180, 262, 105,
	440, 265, 138, 399, 270, 115, 104, 256, 219, 307,
	469, 98, 491, 131, 181, 3, 93, 196, 94, 154,
	155, 480, 469, 114, 464, 469, 120, 313, 70, 72,
	28, 29, 30, 31, 435, 469, 441, 82, 469, 469,
	89, 85, 58, 469, 69, 149, 90, 282, 283, 284,
	285, 286, 319, 287, 288, 80, 99, 246, 313, 149,
	73, 490, 71, 111, 112, 113, 130, 132, 132, 278,
	132, 184, 137, 489, 139, 118, 488, 142, 487, 143,
	68, 149, 146, 147, 78, 249, 483, 151, 141, 472,
	470, 133, 422, 135, 468, 248, 382, 378, 182, 116,
	117, 421, 183, 318, 50, 420, 121, 358, 51, 312,
	302, 81, 84, 177, 179, 70, 187, 190, 70, 383,
	200, 194, 53, 52, 199, 132, 48, 119, 273, 257,
	293, 69, 300, 436, 69, 434, 215, 73, 374, 376,
	257, 201, 305, 225, 200, 99, 247, 153, 202, 216,
	217, 129, 229, 136, 223, 234, 235, 230, 238, 239,
	240, 241, 242, 243, 244, 245, 227, 228, 224, 110,
	125, 154, 155, 212, 114, 375, 226, 120, 154, 155,
	250, 99, 99, 70, 70, 47, 385, 44, 397, 261,
	46, 206, 268, 210, 271, 236, 48, 275, 308, 69,
	263, 274, 252, 254, 416, 417, 260, 419, 198, 267,
	276, 145, 264, 97, 111, 112, 113, 418, 39, 372,
	40, 41, 102, 42, 43, 213, 118, 223, 295, 296,
	292, 294, 197, 57, 127, 54, 279, 55, 56, 165,
	166, 167, 168, 169, 299, 308, 101, 371, 370, 99,
	116, 117, 95, 167, 168, 169, 368, 121, 197, 310,
	398, 369, 148, 304, 127, 132, 314, 237, 366, 306,
	301, 311, 248, 367, 467, 209, 211, 208, 119, 465,
	429, 387, 15, 222, 128, 192, 223, 223, 360, 364,
	365, 457, 221, 381, 28, 29, 30, 31, 110, 456,
	455, 384, 454, 114, 70, 280, 120, 448, 389, 184,
	271, 411, 390, 393, 409, 408, 400, 405, 403, 203,
	388, 394, 15, 188, 395, 193, 401, 122, 186, 185,
	439, 127, 291, 406, 407, 73, 149, 71, 379, 152,
	377, 64, 71, 111, 112, 113, 361, 214, 195, 410,
	140, 102, 65, 87, 86, 118, 485, 124, 282, 283,
	284, 285, 286, 412, 287, 288, 79, 15, 16, 17,
	18, 437, 463, 462, 486, 101, 423, 290, 88, 116,
	117, 424, 222, 253, 73, 110, 121, 426, 425, 359,
	114, 221, 386, 120, 15, 443, 19, 444, 63, 446,
	446, 298, 446, 442, 447, 123, 449, 119, 126, 493,
	272, 250, 204, 452, 83, 450, 61, 231, 259, 232,
	233, 144, 461, 459, 460, 393, 451, 59, 453, 97,
	111, 112, 113, 45, 316, 91, 92, 415, 102, 446,
	428, 317, 118, 471, 473, 70, 446, 446, 446, 70,
	475, 476, 477, 474, 20, 478, 414, 479, 266, 481,
	482, 263, 101, 363, 110, 69, 116, 117, 95, 114,
	197, 15, 120, 121, 134, 492, 22, 23, 26, 24,
	25, 21, 77, 76, 494, 495, 431, 432, 75, 66,
	458, 15, 114, 33, 119, 120, 433, 396, 251, 332,
	157, 161, 159, 160, 331, 330, 329, 427, 71, 111,
	112, 113, 324, 323, 322, 320, 269, 102, 32, 404,
	402, 118, 466, 162, 163, 164, 165, 166, 167, 168,
	169, 71, 111, 112, 113, 34, 35, 36, 37, 38,
	184, 101, 74, 205, 118, 116, 117, 277, 173, 174,
	175, 176, 121, 170, 171, 172, 207, 49, 162, 163,
	164, 165, 166, 167, 168, 169, 191, 484, 116, 117,
	430, 391, 413, 119, 362, 121, 158, 162, 163, 164,
	165, 166, 167, 168, 169, 380, 303, 189, 162, 163,
	164, 165, 166, 167, 168, 169, 119, 297, 255, 109,
	162, 163, 164, 165, 166, 167, 168, 169, 162, 163,
	164, 165, 166, 167, 168, 169, 334, 106, 335, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 325,
	326, 327, 328, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 321, 333, 108, 309, 103,
	258, 156, 100, 373, 220, 281, 218, 96, 289, 150,
	60, 27, 62, 14, 13, 12, 11, 10, 9, 8,
	7, 6, 5, 4, 2, 1,
}
var yyPact = []int{

	372, -1000, -1000, 225, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 107, 75, -11, 11, 10, 123, 496, 419, -1000,
	-1000, -1000, 407, -1000, 378, 297, 490, 282, 280, -1000,
	489, 484, 483, -32, -65, -3, 280, -65, -1000, 0,
	280, -1000, 299, 298, -80, 280, -80, -80, -1000, -1000,
	158, -1000, 268, 297, 333, 73, 297, 191, -1000, 219,
	-1000, 54, -1000, -1000, -1000, 280, 280, 280, 475, 280,
	65, 280, -1000, 280, 295, -1000, -41, -1000, 280, 410,
	127, 280, 280, 263, -1000, -1000, 329, 50, 92, 488,
	-1000, 453, 287, -1000, -1000, -1000, 7, 265, 264, -1000,
	259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7, -1000, 261, 282, 293, 470, 282, 7, 280,
	-1000, -1000, 44, -1000, 280, 255, 401, 106, -1000, -1000,
	170, -1000, 292, -1000, -1000, 280, -1000, -1000, 228, 158,
	-1000, -1000, 280, 82, 453, 453, 7, 245, 405, 7,
	7, 179, 7, 7, 7, 7, 7, 7, 7, 7,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 488, -67,
	22, -39, 488, -1000, 476, 374, 158, -1000, 496, 29,
	519, 399, 282, 282, 258, -1000, 455, 453, -1000, 519,
	-1000, 280, -1000, 5, -1000, 117, 280, -1000, -49, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 232, 284,
	322, 327, 33, -1000, -1000, -1000, -1000, -1000, -1000, 519,
	-1000, 245, 7, 7, 519, 511, -1000, 385, 147, 147,
	147, 159, 159, -1000, -1000, -1000, -1000, -1000, 7, -1000,
	519, -1000, 8, 158, -14, 40, -1000, 453, 114, 245,
	225, 161, -15, -1000, 455, 429, 437, 92, -1000, -21,
	-1000, 592, -7, 367, 280, -1000, -1000, 291, -1000, 462,
	228, 228, -1000, -1000, 194, 182, 174, 173, 145, 56,
	-1000, 285, -27, 283, -1000, 519, 499, 7, -1000, 519,
	-1000, -28, -1000, 16, -1000, 7, 85, -1000, 371, 208,
	-1000, -1000, -1000, 282, 429, -1000, 7, 7, -1000, 5,
	172, 252, 252, 254, 253, -1000, -1000, -1000, -1000, 252,
	252, -1000, -1000, 251, 250, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 280, 247,
	-1000, -1000, 454, 433, 284, 120, -1000, 143, -1000, 133,
	-1000, -1000, -1000, -1000, -9, -13, -22, -1000, -1000, -1000,
	7, 519, -1000, -1000, 519, 7, 366, 245, -1000, -1000,
	434, 207, -1000, 469, -1000, -1000, 12, -1000, 355, -1000,
	273, -86, -86, 273, -1000, 273, -1000, -1000, 280, 280,
	243, 280, -1000, 455, 453, 7, 453, 238, -1000, -1000,
	236, 235, 227, 519, 519, 493, -1000, 7, 7, 7,
	-1000, -1000, -1000, -1000, 351, -1000, 350, -1000, -100, -1000,
	-1000, -1000, -1000, 206, 201, -30, -1000, -34, 280, -35,
	429, 92, 199, 92, 282, 280, 280, 280, 282, 519,
	519, -1000, -1000, -1000, -1000, 273, -103, 273, -1000, 280,
	-1000, -38, -1000, 349, -46, -48, -51, -63, 191, -112,
	-1000, -1000, -1000, -1000, -1000, 478, 397, -1000, -1000, -1000,
	-1000, -1000, -1000, 280, 280, -1000,
}
var yyPgo = []int{

	0, 685, 684, 24, 683, 682, 681, 680, 679, 678,
	677, 676, 675, 674, 673, 528, 672, 671, 670, 26,
	28, 669, 668, 667, 666, 18, 665, 664, 351, 23,
	663, 4, 27, 21, 662, 661, 660, 659, 5, 9,
	7, 658, 657, 15, 627, 16, 609, 608, 17, 597,
	596, 584, 582, 11, 581, 2, 580, 3, 577, 576,
	8, 19, 6, 90, 567, 566, 557, 553, 10, 388,
	376, 420, 552, 13, 1, 532, 530, 529, 0, 526,
	14, 525, 524, 523, 522, 516, 515, 514, 509, 507,
	506, 12, 503,
}
var yyR1 = []int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 4, 4, 5, 6,
	7, 8, 9, 9, 9, 9, 9, 10, 10, 10,
	10, 79, 79, 80, 80, 80, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	82, 82, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 85, 85, 86, 86, 87, 87, 87, 87, 88,
	88, 88, 88, 89, 89, 89, 90, 90, 90, 90,
	90, 11, 11, 11, 12, 13, 14, 14, 14, 14,
	92, 15, 16, 16, 17, 17, 17, 17, 17, 18,
	18, 19, 19, 20, 20, 20, 23, 23, 21, 21,
	21, 24, 24, 25, 25, 25, 25, 25, 22, 22,
	22, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	27, 27, 27, 28, 28, 29, 29, 30, 30, 30,
	30, 31, 31, 32, 32, 33, 33, 33, 33, 33,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	35, 35, 35, 35, 35, 35, 35, 36, 36, 41,
	41, 39, 39, 43, 40, 40, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 42, 42, 44, 44, 44, 46, 49,
	49, 47, 47, 48, 50, 50, 45, 45, 37, 37,
	37, 37, 51, 51, 52, 52, 53, 53, 54, 54,
	55, 56, 56, 56, 57, 57, 57, 57, 58, 58,
	58, 59, 59, 60, 60, 61, 61, 62, 62, 63,
	69, 69, 70, 70, 64, 64, 65, 65, 65, 65,
	65, 66, 66, 71, 71, 73, 73, 74, 76, 76,
	77, 77, 75, 75, 68, 68, 67, 67, 72, 72,
	78, 91,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 12, 3, 7, 7, 8, 7,
	3, 3, 2, 3, 4, 4, 5, 8, 8, 4,
	4, 1, 3, 4, 6, 5, 2, 3, 3, 2,
	1, 1, 1, 1, 2, 2, 1, 1, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 1, 1,
	2, 6, 7, 4, 5, 3, 4, 5, 5, 5,
	0, 2, 0, 2, 1, 2, 1, 1, 1, 0,
	1, 1, 3, 1, 2, 3, 1, 1, 0, 1,
	2, 1, 3, 3, 3, 3, 5, 7, 0, 1,
	2, 1, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 3, 1, 1, 3, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	3, 3, 4, 3, 4, 5, 6, 3, 4, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 3, 1, 3, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 4,
	5, 4, 1, 1, 1, 1, 1, 1, 5, 0,
	1, 1, 2, 4, 0, 2, 1, 3, 1, 1,
	1, 1, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 0, 3, 1, 3, 0, 5, 1, 3, 3,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 3, 1, 0, 5,
	0, 4, 0, 2, 0, 1, 0, 2, 0, 2,
	1, 0,
}
var yyChk = []int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -12, -13, -14, 5, 6, 7, 8, 34,
	92, 119, 114, 115, 117, 118, 116, -17, 79, 80,
	81, 82, -15, -92, -15, -15, -15, -15, -15, 121,
	123, 124, 126, 127, 122, -71, 125, 120, 131, -64,
	125, 129, 122, 122, 122, 124, 125, 120, -3, 18,
	-18, 19, -16, 30, -28, 65, 9, -62, -63, -45,
	-78, 65, -78, 65, -72, 9, 9, 9, 126, -70,
	130, 124, -78, -70, 122, -78, 65, 65, -69, 130,
	-78, -69, -69, -19, -20, 104, -23, 65, -33, -38,
	-34, 98, 74, -37, -45, -39, -44, -78, -42, -46,
	21, 66, 67, 68, 26, -43, 102, 103, 78, 130,
	29, 109, 69, -28, 34, 107, -28, 83, 75, 107,
	-78, -29, -78, -29, 9, -29, 98, -78, -91, -78,
	65, -91, 128, -78, 21, 94, -78, -78, 9, 83,
	-21, -78, 20, 107, 96, 97, -35, 22, 98, 24,
	25, 23, 99, 100, 101, 102, 103, 104, 105, 106,
	75, 76, 77, 70, 71, 72, 73, -33, -38, -33,
	-40, -3, -38, -38, 74, 74, 74, -43, 74, -49,
	-38, -59, 34, 74, -62, 65, -32, 10, -63, -38,
	-78, 107, -29, 74, 21, -67, 95, -65, 117, 115,
	33, 116, 13, 65, 65, -78, -91, -91, -24, -25,
	-27, 74, 65, -43, -20, -78, 104, -33, -33, -38,
	-39, 22, 24, 25, -38, -38, 26, 98, -38, -38,
	-38, -38, -38, -38, -38, -38, 134, 134, 83, 134,
	-38, 134, -19, 19, -19, -47, -48, 110, -36, 29,
	-3, -62, -60, -45, -32, -53, 13, -33, -78, -79,
	-80, -78, -71, 133, 94, -78, -91, -66, 128, -32,
	83, -26, 84, 85, 86, 87, 88, 90, 91, -22,
	65, 20, -25, 107, -39, -38, -38, 96, 26, -38,
	134, -19, 134, -50, -48, 112, -33, -61, 94, -41,
	-39, -61, 134, 83, -53, -57, 15, 14, 134, 83,
	-81, 63, -82, -83, -84, 47, 48, 49, 50, -85,
	-86, -87, -88, 64, 34, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 124, 32,
	-29, 65, -51, 11, -25, -25, 84, 89, 84, 89,
	84, 84, 84, -30, 92, 129, 93, 65, 134, 65,
	96, -38, 134, 113, -38, 111, 31, 83, -45, -57,
	-38, -54, -55, -38, -91, -80, -89, 26, 98, -73,
	74, -73, -76, 74, -77, 74, -73, -73, 74, 74,
	-78, 74, -91, -52, 12, 14, 94, 95, 84, 84,
	124, 124, 124, -38, -38, 32, -39, 83, 16, 83,
	-56, 27, 28, -90, 133, 32, 131, 26, -74, 67,
	-68, 132, -68, -74, -74, -31, -78, -31, 74, -31,
	-53, -33, -40, -33, 74, 74, 74, 74, 7, -38,
	-38, -55, 32, 32, 134, 83, -75, 83, 134, 83,
	134, -31, 134, -57, -60, -31, -31, -31, -62, -74,
	134, -74, -78, 134, -58, 17, 35, 134, 134, 134,
	134, 134, 7, 22, -78, -78,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 90, 90, 90, 90, 90,
	90, 0, 253, 244, 0, 0, 0, 0, 94, 96,
	97, 98, 99, 92, 0, 0, 0, 0, 0, 22,
	268, 0, 0, 0, 242, 0, 0, 242, 254, 0,
	0, 245, 0, 0, 240, 0, 240, 240, 15, 95,
	0, 100, 91, 0, 0, 133, 0, 20, 237, 0,
	206, 270, 21, 270, 23, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 271, 0, 85, 0, 0,
	0, 0, 0, 0, 101, 103, 108, 270, 106, 107,
	145, 0, 0, 176, 177, 178, 0, 206, 0, 192,
	0, 208, 209, 210, 211, 172, 195, 196, 197, 193,
	194, 199, 93, 231, 0, 0, 143, 0, 0, 0,
	269, 24, 135, 25, 0, 0, 0, 266, 29, 30,
	0, 83, 0, 86, 241, 0, 271, 271, 0, 0,
	104, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 162, 163, 164, 165, 166, 148, 0, 0,
	0, 0, 174, 187, 0, 0, 0, 159, 0, 0,
	200, 0, 0, 0, 143, 134, 216, 0, 238, 239,
	207, 0, 26, 253, 243, 0, 0, 271, 251, 246,
	247, 248, 249, 250, 84, 87, 88, 89, 143, 111,
	118, 0, 130, 132, 102, 110, 105, 146, 147, 150,
	151, 0, 0, 0, 153, 0, 157, 0, 179, 180,
	181, 182, 183, 184, 185, 186, 149, 171, 0, 173,
	174, 188, 0, 0, 0, 204, 201, 0, 235, 0,
	168, 235, 0, 233, 216, 224, 0, 144, 136, 0,
	31, 0, 0, 0, 0, 267, 81, 0, 252, 212,
	0, 0, 121, 122, 0, 0, 0, 0, 0, 137,
	119, 0, 0, 0, 152, 154, 0, 0, 158, 175,
	189, 0, 191, 0, 202, 0, 0, 16, 0, 167,
	169, 17, 232, 0, 224, 19, 0, 0, 271, 253,
	73, 255, 255, 258, 260, 40, 41, 42, 43, 255,
	255, 46, 47, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 0, 0,
	271, 82, 214, 0, 112, 115, 123, 0, 125, 0,
	127, 128, 129, 113, 0, 0, 0, 120, 114, 131,
	0, 155, 190, 198, 205, 0, 0, 0, 234, 18,
	225, 217, 218, 221, 27, 32, 76, 74, 0, 36,
	0, 264, 264, 0, 39, 0, 44, 45, 0, 0,
	0, 0, 28, 216, 0, 0, 0, 0, 124, 126,
	0, 0, 0, 156, 203, 0, 170, 0, 0, 0,
	220, 222, 223, 33, 0, 78, 79, 75, 0, 257,
	37, 265, 38, 0, 262, 0, 141, 0, 0, 0,
	224, 215, 213, 116, 0, 0, 0, 0, 0, 226,
	227, 219, 77, 80, 256, 0, 0, 0, 48, 0,
	49, 0, 35, 228, 0, 0, 0, 0, 236, 0,
	261, 263, 142, 34, 14, 0, 0, 117, 138, 139,
	140, 259, 229, 0, 0, 230,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 106, 99, 3,
	74, 134, 104, 102, 83, 103, 107, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 78,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 79, 80, 81, 82, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line sql.y:173
		{
			setParseTree(yylex, yyS[yypt-0].statement)
		}
	case 2:
		//line sql.y:179
		{
			yyVAL.statement = yyS[yypt-0].selStmt
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		yyVAL.statement = yyS[yypt-0].statement
	case 10:
		yyVAL.statement = yyS[yypt-0].statement
	case 11:
		yyVAL.statement = yyS[yypt-0].statement
	case 12:
		yyVAL.statement = yyS[yypt-0].statement
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		//line sql.y:196
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyS[yypt-10].str2), Distinct: yyS[yypt-9].str, Exprs: yyS[yypt-8].selectExprs, From: yyS[yypt-6].tableExprs, Where: NewWhere(astWhere, yyS[yypt-5].boolExpr), GroupBy: GroupBy(yyS[yypt-4].valExprs), Having: NewWhere(astHaving, yyS[yypt-3].boolExpr), OrderBy: yyS[yypt-2].orderBy, Limit: yyS[yypt-1].limit, Lock: yyS[yypt-0].str}
		}
	case 15:
		//line sql.y:200
		{
			yyVAL.selStmt = &Union{Type: yyS[yypt-1].str, Left: yyS[yypt-2].selStmt, Right: yyS[yypt-0].selStmt}
		}
	case 16:
		//line sql.y:206
		{
			yyVAL.statement = &Insert{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Columns: yyS[yypt-2].columns, Rows: yyS[yypt-1].insRows, OnDup: OnDup(yyS[yypt-0].updateExprs)}
		}
	case 17:
		//line sql.y:210
		{
			cols := make(Columns, 0, len(yyS[yypt-1].updateExprs))
			vals := make(ValTuple, 0, len(yyS[yypt-1].updateExprs))
			for _, col := range yyS[yypt-1].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyS[yypt-0].updateExprs)}
		}
	case 18:
		//line sql.y:222
		{
			yyVAL.statement = &Update{Comments: Comments(yyS[yypt-6].str2), Table: yyS[yypt-5].tableName, Exprs: yyS[yypt-3].updateExprs, Where: NewWhere(astWhere, yyS[yypt-2].boolExpr), OrderBy: yyS[yypt-1].orderBy, Limit: yyS[yypt-0].limit}
		}
	case 19:
		//line sql.y:228
		{
			yyVAL.statement = &Delete{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Where: NewWhere(astWhere, yyS[yypt-2].boolExpr), OrderBy: yyS[yypt-1].orderBy, Limit: yyS[yypt-0].limit}
		}
	case 20:
		//line sql.y:234
		{
			yyVAL.statement = &Set{Comments: Comments(yyS[yypt-1].str2), Exprs: yyS[yypt-0].updateExprs}
		}
	case 21:
		//line sql.y:240
		{
			yyVAL.statement = &Use{Comments: Comments(yyS[yypt-1].str2), Name: yyS[yypt-0].str}
		}
	case 22:
		//line sql.y:246
		{
			yyVAL.statement = &ShowDatabases{}
		}
	case 23:
		//line sql.y:250
		{
			yyVAL.statement = &ShowTables{Name: yyS[yypt-0].str}
		}
	case 24:
		//line sql.y:254
		{
			yyVAL.statement = &ShowIndex{Table: yyS[yypt-0].tableName}
		}
	case 25:
		//line sql.y:258
		{
			yyVAL.statement = &ShowColumns{Table: yyS[yypt-0].tableName}
		}
	case 26:
		//line sql.y:262
		{
			yyVAL.statement = &ShowColumns{Table: yyS[yypt-0].tableName, Full: true}
		}
	case 27:
		//line sql.y:268
		{
			yyVAL.statement = &CreateTable{IfNotExists: yyS[yypt-5].boolVal, Table: yyS[yypt-4].tableName, Defs: yyS[yypt-2].tableDefs}
		}
	case 28:
		//line sql.y:272
		{
			yyVAL.statement = &CreateIndex{Name: yyS[yypt-4].str, Table: yyS[yypt-1].tableName, Unique: yyS[yypt-6].boolVal}
		}
	case 29:
		//line sql.y:276
		{
			yyVAL.statement = &CreateView{Name: yyS[yypt-1].str}
		}
	case 30:
		//line sql.y:280
		{
			yyVAL.statement = &CreateDatabase{IfNotExists: yyS[yypt-1].boolVal, Name: yyS[yypt-0].str}
		}
	case 31:
		//line sql.y:286
		{
			yyVAL.tableDefs = TableDefs{yyS[yypt-0].tableDef}
		}
	case 32:
		//line sql.y:290
		{
			yyVAL.tableDefs = append(yyVAL.tableDefs, yyS[yypt-0].tableDef)
		}
	case 33:
		//line sql.y:296
		{
			yyVAL.tableDef = &ColumnTableDef{Name: yyS[yypt-3].str, Type: yyS[yypt-2].columnType, Nullable: Nullability(yyS[yypt-1].intVal), PrimaryKey: yyS[yypt-0].intVal == 1, Unique: yyS[yypt-0].intVal == 2}
		}
	case 34:
		//line sql.y:300
		{
			yyVAL.tableDef = &IndexTableDef{Name: yyS[yypt-3].str, Unique: yyS[yypt-5].boolVal, Columns: yyS[yypt-1].str2}
		}
	case 35:
		//line sql.y:304
		{
			yyVAL.tableDef = &IndexTableDef{Name: "primary", PrimaryKey: true, Unique: true, Columns: yyS[yypt-1].str2}
		}
	case 36:
		//line sql.y:310
		{
			yyVAL.columnType = &BitType{N: yyS[yypt-0].intVal}
		}
	case 37:
		//line sql.y:312
		{
			yyVAL.columnType = &IntType{Name: yyS[yypt-2].str, N: yyS[yypt-1].intVal, Unsigned: yyS[yypt-0].boolVal}
		}
	case 38:
		//line sql.y:314
		{
			yyVAL.columnType = &FloatType{Name: yyS[yypt-2].str, N: yyS[yypt-1].intVal2[0], Prec: yyS[yypt-1].intVal2[1], Unsigned: yyS[yypt-0].boolVal}
		}
	case 39:
		//line sql.y:316
		{
			yyVAL.columnType = &DecimalType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal2[0], Prec: yyS[yypt-0].intVal2[1]}
		}
	case 40:
		//line sql.y:318
		{
			yyVAL.columnType = &DateType{}
		}
	case 41:
		//line sql.y:320
		{
			yyVAL.columnType = &TimeType{}
		}
	case 42:
		//line sql.y:322
		{
			yyVAL.columnType = &DateTimeType{}
		}
	case 43:
		//line sql.y:324
		{
			yyVAL.columnType = &TimestampType{}
		}
	case 44:
		//line sql.y:326
		{
			yyVAL.columnType = &CharType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal}
		}
	case 45:
		//line sql.y:328
		{
			yyVAL.columnType = &BinaryType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal}
		}
	case 46:
		//line sql.y:330
		{
			yyVAL.columnType = &TextType{Name: yyS[yypt-0].str}
		}
	case 47:
		//line sql.y:332
		{
			yyVAL.columnType = &BlobType{Name: yyS[yypt-0].str}
		}
	case 48:
		//line sql.y:334
		{
			yyVAL.columnType = &EnumType{Vals: yyS[yypt-1].str2}
		}
	case 49:
		//line sql.y:336
		{
			yyVAL.columnType = &SetType{Vals: yyS[yypt-1].str2}
		}
	case 50:
		//line sql.y:340
		{
			yyVAL.str = astInt
		}
	case 51:
		//line sql.y:342
		{
			yyVAL.str = astTinyInt
		}
	case 52:
		//line sql.y:344
		{
			yyVAL.str = astSmallInt
		}
	case 53:
		//line sql.y:346
		{
			yyVAL.str = astMediumInt
		}
	case 54:
		//line sql.y:348
		{
			yyVAL.str = astBigInt
		}
	case 55:
		//line sql.y:350
		{
			yyVAL.str = astInteger
		}
	case 56:
		//line sql.y:354
		{
			yyVAL.str = astReal
		}
	case 57:
		//line sql.y:356
		{
			yyVAL.str = astDouble
		}
	case 58:
		//line sql.y:358
		{
			yyVAL.str = astFloat
		}
	case 59:
		//line sql.y:362
		{
			yyVAL.str = astDecimal
		}
	case 60:
		//line sql.y:364
		{
			yyVAL.str = astNumeric
		}
	case 61:
		//line sql.y:368
		{
			yyVAL.str = astChar
		}
	case 62:
		//line sql.y:370
		{
			yyVAL.str = astVarChar
		}
	case 63:
		//line sql.y:374
		{
			yyVAL.str = astBinary
		}
	case 64:
		//line sql.y:376
		{
			yyVAL.str = astVarBinary
		}
	case 65:
		//line sql.y:380
		{
			yyVAL.str = astText
		}
	case 66:
		//line sql.y:382
		{
			yyVAL.str = astTinyText
		}
	case 67:
		//line sql.y:384
		{
			yyVAL.str = astMediumText
		}
	case 68:
		//line sql.y:386
		{
			yyVAL.str = astLongText
		}
	case 69:
		//line sql.y:390
		{
			yyVAL.str = astBlob
		}
	case 70:
		//line sql.y:392
		{
			yyVAL.str = astTinyBlob
		}
	case 71:
		//line sql.y:394
		{
			yyVAL.str = astMediumBlob
		}
	case 72:
		//line sql.y:396
		{
			yyVAL.str = astLongBlob
		}
	case 73:
		//line sql.y:399
		{
			yyVAL.intVal = int(SilentNull)
		}
	case 74:
		//line sql.y:401
		{
			yyVAL.intVal = int(Null)
		}
	case 75:
		//line sql.y:403
		{
			yyVAL.intVal = int(NotNull)
		}
	case 76:
		//line sql.y:406
		{
			yyVAL.intVal = 0
		}
	case 77:
		//line sql.y:408
		{
			yyVAL.intVal = 1
		}
	case 78:
		//line sql.y:410
		{
			yyVAL.intVal = 1
		}
	case 79:
		//line sql.y:412
		{
			yyVAL.intVal = 2
		}
	case 80:
		//line sql.y:414
		{
			yyVAL.intVal = 2
		}
	case 81:
		//line sql.y:418
		{
			yyVAL.statement = &AlterTable{Name: yyS[yypt-2].str}
		}
	case 82:
		//line sql.y:422
		{
			// Change this to a rename statement
			yyVAL.statement = &RenameTable{Name: yyS[yypt-3].str, NewName: yyS[yypt-0].str}
		}
	case 83:
		//line sql.y:427
		{
			yyVAL.statement = &AlterView{Name: yyS[yypt-1].str}
		}
	case 84:
		//line sql.y:433
		{
			yyVAL.statement = &RenameTable{Name: yyS[yypt-2].str, NewName: yyS[yypt-0].str}
		}
	case 85:
		//line sql.y:439
		{
			yyVAL.statement = &TruncateTable{Name: yyS[yypt-0].str}
		}
	case 86:
		//line sql.y:445
		{
			yyVAL.statement = &DropTable{Name: yyS[yypt-0].str, IfExists: yyS[yypt-1].boolVal}
		}
	case 87:
		//line sql.y:449
		{
			yyVAL.statement = &DropIndex{Name: yyS[yypt-2].str, TableName: yyS[yypt-0].str}
		}
	case 88:
		//line sql.y:453
		{
			yyVAL.statement = &DropView{Name: yyS[yypt-1].str, IfExists: yyS[yypt-2].boolVal}
		}
	case 89:
		//line sql.y:457
		{
			yyVAL.statement = &DropDatabase{Name: yyS[yypt-1].str, IfExists: yyS[yypt-2].boolVal}
		}
	case 90:
		//line sql.y:462
		{
			setAllowComments(yylex, true)
		}
	case 91:
		//line sql.y:466
		{
			yyVAL.str2 = yyS[yypt-0].str2
			setAllowComments(yylex, false)
		}
	case 92:
		//line sql.y:472
		{
			yyVAL.str2 = nil
		}
	case 93:
		//line sql.y:476
		{
			yyVAL.str2 = append(yyS[yypt-1].str2, yyS[yypt-0].str)
		}
	case 94:
		//line sql.y:482
		{
			yyVAL.str = astUnion
		}
	case 95:
		//line sql.y:486
		{
			yyVAL.str = astUnionAll
		}
	case 96:
		//line sql.y:490
		{
			yyVAL.str = astSetMinus
		}
	case 97:
		//line sql.y:494
		{
			yyVAL.str = astExcept
		}
	case 98:
		//line sql.y:498
		{
			yyVAL.str = astIntersect
		}
	case 99:
		//line sql.y:503
		{
			yyVAL.str = ""
		}
	case 100:
		//line sql.y:507
		{
			yyVAL.str = astDistinct
		}
	case 101:
		//line sql.y:513
		{
			yyVAL.selectExprs = SelectExprs{yyS[yypt-0].selectExpr}
		}
	case 102:
		//line sql.y:517
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyS[yypt-0].selectExpr)
		}
	case 103:
		//line sql.y:523
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 104:
		//line sql.y:527
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyS[yypt-1].expr, As: yyS[yypt-0].str}
		}
	case 105:
		//line sql.y:531
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyS[yypt-2].str}
		}
	case 106:
		//line sql.y:537
		{
			yyVAL.expr = yyS[yypt-0].boolExpr
		}
	case 107:
		//line sql.y:541
		{
			yyVAL.expr = yyS[yypt-0].valExpr
		}
	case 108:
		//line sql.y:546
		{
			yyVAL.str = ""
		}
	case 109:
		//line sql.y:550
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 110:
		//line sql.y:554
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 111:
		//line sql.y:560
		{
			yyVAL.tableExprs = TableExprs{yyS[yypt-0].tableExpr}
		}
	case 112:
		//line sql.y:564
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyS[yypt-0].tableExpr)
		}
	case 113:
		//line sql.y:570
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyS[yypt-2].smTableExpr, As: yyS[yypt-1].str, Hints: yyS[yypt-0].indexHints}
		}
	case 114:
		//line sql.y:574
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyS[yypt-1].tableExpr}
		}
	case 115:
		//line sql.y:578
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-2].tableExpr, Join: yyS[yypt-1].str, RightExpr: yyS[yypt-0].tableExpr}
		}
	case 116:
		//line sql.y:582
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-4].tableExpr, Join: yyS[yypt-3].str, RightExpr: yyS[yypt-2].tableExpr, Cond: &OnJoinCond{yyS[yypt-0].boolExpr}}
		}
	case 117:
		//line sql.y:586
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-6].tableExpr, Join: yyS[yypt-5].str, RightExpr: yyS[yypt-4].tableExpr, Cond: &UsingJoinCond{yyS[yypt-1].columns}}
		}
	case 118:
		//line sql.y:591
		{
			yyVAL.str = ""
		}
	case 119:
		//line sql.y:595
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 120:
		//line sql.y:599
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 121:
		//line sql.y:605
		{
			yyVAL.str = astJoin
		}
	case 122:
		//line sql.y:609
		{
			yyVAL.str = astStraightJoin
		}
	case 123:
		//line sql.y:613
		{
			yyVAL.str = astLeftJoin
		}
	case 124:
		//line sql.y:617
		{
			yyVAL.str = astLeftJoin
		}
	case 125:
		//line sql.y:621
		{
			yyVAL.str = astRightJoin
		}
	case 126:
		//line sql.y:625
		{
			yyVAL.str = astRightJoin
		}
	case 127:
		//line sql.y:629
		{
			yyVAL.str = astJoin
		}
	case 128:
		//line sql.y:633
		{
			yyVAL.str = astCrossJoin
		}
	case 129:
		//line sql.y:637
		{
			yyVAL.str = astNaturalJoin
		}
	case 130:
		//line sql.y:643
		{
			yyVAL.smTableExpr = &TableName{Name: yyS[yypt-0].str}
		}
	case 131:
		//line sql.y:647
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 132:
		//line sql.y:651
		{
			yyVAL.smTableExpr = yyS[yypt-0].subquery
		}
	case 133:
		//line sql.y:657
		{
			yyVAL.tableName = &TableName{Name: yyS[yypt-0].str}
		}
	case 134:
		//line sql.y:661
		{
			yyVAL.tableName = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 135:
		//line sql.y:667
		{
			yyVAL.tableName = &TableName{Name: yyS[yypt-0].str}
		}
	case 136:
		//line sql.y:671
		{
			yyVAL.tableName = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 137:
		//line sql.y:676
		{
			yyVAL.indexHints = nil
		}
	case 138:
		//line sql.y:680
		{
			yyVAL.indexHints = &IndexHints{Type: astUse, Indexes: yyS[yypt-1].str2}
		}
	case 139:
		//line sql.y:684
		{
			yyVAL.indexHints = &IndexHints{Type: astIgnore, Indexes: yyS[yypt-1].str2}
		}
	case 140:
		//line sql.y:688
		{
			yyVAL.indexHints = &IndexHints{Type: astForce, Indexes: yyS[yypt-1].str2}
		}
	case 141:
		//line sql.y:694
		{
			yyVAL.str2 = []string{yyS[yypt-0].str}
		}
	case 142:
		//line sql.y:698
		{
			yyVAL.str2 = append(yyS[yypt-2].str2, yyS[yypt-0].str)
		}
	case 143:
		//line sql.y:703
		{
			yyVAL.boolExpr = nil
		}
	case 144:
		//line sql.y:707
		{
			yyVAL.boolExpr = yyS[yypt-0].boolExpr
		}
	case 145:
		yyVAL.boolExpr = yyS[yypt-0].boolExpr
	case 146:
		//line sql.y:714
		{
			yyVAL.boolExpr = &AndExpr{Op: string(yyS[yypt-1].str), Left: yyS[yypt-2].boolExpr, Right: yyS[yypt-0].boolExpr}
		}
	case 147:
		//line sql.y:718
		{
			yyVAL.boolExpr = &OrExpr{Op: string(yyS[yypt-1].str), Left: yyS[yypt-2].boolExpr, Right: yyS[yypt-0].boolExpr}
		}
	case 148:
		//line sql.y:722
		{
			yyVAL.boolExpr = &NotExpr{Op: string(yyS[yypt-1].str), Expr: yyS[yypt-0].boolExpr}
		}
	case 149:
		//line sql.y:726
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyS[yypt-1].boolExpr}
		}
	case 150:
		//line sql.y:732
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: yyS[yypt-1].str, Right: yyS[yypt-0].valExpr}
		}
	case 151:
		//line sql.y:736
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: astIn, Right: yyS[yypt-0].tuple}
		}
	case 152:
		//line sql.y:740
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-3].valExpr, Operator: astNotIn, Right: yyS[yypt-0].tuple}
		}
	case 153:
		//line sql.y:744
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: astLike, Right: yyS[yypt-0].valExpr}
		}
	case 154:
		//line sql.y:748
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-3].valExpr, Operator: astNotLike, Right: yyS[yypt-0].valExpr}
		}
	case 155:
		//line sql.y:752
		{
			yyVAL.boolExpr = &RangeCond{Left: yyS[yypt-4].valExpr, Operator: astBetween, From: yyS[yypt-2].valExpr, To: yyS[yypt-0].valExpr}
		}
	case 156:
		//line sql.y:756
		{
			yyVAL.boolExpr = &RangeCond{Left: yyS[yypt-5].valExpr, Operator: astNotBetween, From: yyS[yypt-2].valExpr, To: yyS[yypt-0].valExpr}
		}
	case 157:
		//line sql.y:760
		{
			yyVAL.boolExpr = &NullCheck{Operator: astNull, Expr: yyS[yypt-2].valExpr}
		}
	case 158:
		//line sql.y:764
		{
			yyVAL.boolExpr = &NullCheck{Operator: astNotNull, Expr: yyS[yypt-3].valExpr}
		}
	case 159:
		//line sql.y:768
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyS[yypt-0].subquery}
		}
	case 160:
		//line sql.y:774
		{
			yyVAL.str = astEQ
		}
	case 161:
		//line sql.y:778
		{
			yyVAL.str = astLT
		}
	case 162:
		//line sql.y:782
		{
			yyVAL.str = astGT
		}
	case 163:
		//line sql.y:786
		{
			yyVAL.str = astLE
		}
	case 164:
		//line sql.y:790
		{
			yyVAL.str = astGE
		}
	case 165:
		//line sql.y:794
		{
			yyVAL.str = astNE
		}
	case 166:
		//line sql.y:798
		{
			yyVAL.str = astNSE
		}
	case 167:
		//line sql.y:804
		{
			yyVAL.insRows = yyS[yypt-0].values
		}
	case 168:
		//line sql.y:808
		{
			yyVAL.insRows = yyS[yypt-0].selStmt
		}
	case 169:
		//line sql.y:814
		{
			yyVAL.values = Values{yyS[yypt-0].tuple}
		}
	case 170:
		//line sql.y:818
		{
			yyVAL.values = append(yyS[yypt-2].values, yyS[yypt-0].tuple)
		}
	case 171:
		//line sql.y:824
		{
			yyVAL.tuple = ValTuple(yyS[yypt-1].valExprs)
		}
	case 172:
		//line sql.y:828
		{
			yyVAL.tuple = yyS[yypt-0].subquery
		}
	case 173:
		//line sql.y:834
		{
			yyVAL.subquery = &Subquery{yyS[yypt-1].selStmt}
		}
	case 174:
		//line sql.y:840
		{
			yyVAL.valExprs = ValExprs{yyS[yypt-0].valExpr}
		}
	case 175:
		//line sql.y:844
		{
			yyVAL.valExprs = append(yyS[yypt-2].valExprs, yyS[yypt-0].valExpr)
		}
	case 176:
		//line sql.y:850
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 177:
		//line sql.y:854
		{
			yyVAL.valExpr = yyS[yypt-0].colName
		}
	case 178:
		//line sql.y:858
		{
			yyVAL.valExpr = yyS[yypt-0].tuple
		}
	case 179:
		//line sql.y:862
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astBitand, Right: yyS[yypt-0].valExpr}
		}
	case 180:
		//line sql.y:866
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astBitor, Right: yyS[yypt-0].valExpr}
		}
	case 181:
		//line sql.y:870
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astBitxor, Right: yyS[yypt-0].valExpr}
		}
	case 182:
		//line sql.y:874
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astPlus, Right: yyS[yypt-0].valExpr}
		}
	case 183:
		//line sql.y:878
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astMinus, Right: yyS[yypt-0].valExpr}
		}
	case 184:
		//line sql.y:882
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astMult, Right: yyS[yypt-0].valExpr}
		}
	case 185:
		//line sql.y:886
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astDiv, Right: yyS[yypt-0].valExpr}
		}
	case 186:
		//line sql.y:890
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: astMod, Right: yyS[yypt-0].valExpr}
		}
	case 187:
		//line sql.y:894
		{
			if num, ok := yyS[yypt-0].valExpr.(NumVal); ok {
				switch yyS[yypt-1].byt {
				case '-':
					yyVAL.valExpr = NumVal("-" + string(num))
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyS[yypt-1].byt, Expr: yyS[yypt-0].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyS[yypt-1].byt, Expr: yyS[yypt-0].valExpr}
			}
		}
	case 188:
		//line sql.y:909
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-2].str)}
		}
	case 189:
		//line sql.y:913
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-3].str), Exprs: yyS[yypt-1].selectExprs}
		}
	case 190:
		//line sql.y:917
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-4].str), Distinct: true, Exprs: yyS[yypt-1].selectExprs}
		}
	case 191:
		//line sql.y:921
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-3].str), Exprs: yyS[yypt-1].selectExprs}
		}
	case 192:
		//line sql.y:925
		{
			yyVAL.valExpr = yyS[yypt-0].caseExpr
		}
	case 193:
		//line sql.y:931
		{
			yyVAL.str = "IF"
		}
	case 194:
		//line sql.y:935
		{
			yyVAL.str = "VALUES"
		}
	case 195:
		//line sql.y:941
		{
			yyVAL.byt = astUnaryPlus
		}
	case 196:
		//line sql.y:945
		{
			yyVAL.byt = astUnaryMinus
		}
	case 197:
		//line sql.y:949
		{
			yyVAL.byt = astTilda
		}
	case 198:
		//line sql.y:955
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyS[yypt-3].valExpr, Whens: yyS[yypt-2].whens, Else: yyS[yypt-1].valExpr}
		}
	case 199:
		//line sql.y:960
		{
			yyVAL.valExpr = nil
		}
	case 200:
		//line sql.y:964
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 201:
		//line sql.y:970
		{
			yyVAL.whens = []*When{yyS[yypt-0].when}
		}
	case 202:
		//line sql.y:974
		{
			yyVAL.whens = append(yyS[yypt-1].whens, yyS[yypt-0].when)
		}
	case 203:
		//line sql.y:980
		{
			yyVAL.when = &When{Cond: yyS[yypt-2].boolExpr, Val: yyS[yypt-0].valExpr}
		}
	case 204:
		//line sql.y:985
		{
			yyVAL.valExpr = nil
		}
	case 205:
		//line sql.y:989
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 206:
		//line sql.y:995
		{
			yyVAL.colName = &ColName{Name: yyS[yypt-0].str}
		}
	case 207:
		//line sql.y:999
		{
			yyVAL.colName = &ColName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 208:
		//line sql.y:1005
		{
			yyVAL.valExpr = StrVal(yyS[yypt-0].str)
		}
	case 209:
		//line sql.y:1009
		{
			yyVAL.valExpr = NumVal(yyS[yypt-0].str)
		}
	case 210:
		//line sql.y:1013
		{
			yyVAL.valExpr = ValArg(yyS[yypt-0].str)
		}
	case 211:
		//line sql.y:1017
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 212:
		//line sql.y:1022
		{
			yyVAL.valExprs = nil
		}
	case 213:
		//line sql.y:1026
		{
			yyVAL.valExprs = yyS[yypt-0].valExprs
		}
	case 214:
		//line sql.y:1031
		{
			yyVAL.boolExpr = nil
		}
	case 215:
		//line sql.y:1035
		{
			yyVAL.boolExpr = yyS[yypt-0].boolExpr
		}
	case 216:
		//line sql.y:1040
		{
			yyVAL.orderBy = nil
		}
	case 217:
		//line sql.y:1044
		{
			yyVAL.orderBy = yyS[yypt-0].orderBy
		}
	case 218:
		//line sql.y:1050
		{
			yyVAL.orderBy = OrderBy{yyS[yypt-0].order}
		}
	case 219:
		//line sql.y:1054
		{
			yyVAL.orderBy = append(yyS[yypt-2].orderBy, yyS[yypt-0].order)
		}
	case 220:
		//line sql.y:1060
		{
			yyVAL.order = &Order{Expr: yyS[yypt-1].valExpr, Direction: yyS[yypt-0].str}
		}
	case 221:
		//line sql.y:1065
		{
			yyVAL.str = astAsc
		}
	case 222:
		//line sql.y:1069
		{
			yyVAL.str = astAsc
		}
	case 223:
		//line sql.y:1073
		{
			yyVAL.str = astDesc
		}
	case 224:
		//line sql.y:1078
		{
			yyVAL.limit = nil
		}
	case 225:
		//line sql.y:1082
		{
			yyVAL.limit = &Limit{Rowcount: yyS[yypt-0].valExpr}
		}
	case 226:
		//line sql.y:1086
		{
			yyVAL.limit = &Limit{Offset: yyS[yypt-2].valExpr, Rowcount: yyS[yypt-0].valExpr}
		}
	case 227:
		//line sql.y:1090
		{
			yyVAL.limit = &Limit{Offset: yyS[yypt-0].valExpr, Rowcount: yyS[yypt-2].valExpr}
		}
	case 228:
		//line sql.y:1095
		{
			yyVAL.str = ""
		}
	case 229:
		//line sql.y:1099
		{
			yyVAL.str = astForUpdate
		}
	case 230:
		//line sql.y:1103
		{
			if yyS[yypt-1].str != "share" {
				yylex.Error("expecting share")
				return 1
			}
			if yyS[yypt-0].str != "mode" {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = astShareMode
		}
	case 231:
		//line sql.y:1116
		{
			yyVAL.columns = nil
		}
	case 232:
		//line sql.y:1120
		{
			yyVAL.columns = yyS[yypt-1].columns
		}
	case 233:
		//line sql.y:1126
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyS[yypt-0].colName}}
		}
	case 234:
		//line sql.y:1130
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyS[yypt-0].colName})
		}
	case 235:
		//line sql.y:1135
		{
			yyVAL.updateExprs = nil
		}
	case 236:
		//line sql.y:1139
		{
			yyVAL.updateExprs = yyS[yypt-0].updateExprs
		}
	case 237:
		//line sql.y:1145
		{
			yyVAL.updateExprs = UpdateExprs{yyS[yypt-0].updateExpr}
		}
	case 238:
		//line sql.y:1149
		{
			yyVAL.updateExprs = append(yyS[yypt-2].updateExprs, yyS[yypt-0].updateExpr)
		}
	case 239:
		//line sql.y:1155
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyS[yypt-2].colName, Expr: yyS[yypt-0].valExpr}
		}
	case 240:
		//line sql.y:1160
		{
			yyVAL.boolVal = false
		}
	case 241:
		//line sql.y:1162
		{
			yyVAL.boolVal = true
		}
	case 242:
		//line sql.y:1165
		{
			yyVAL.boolVal = false
		}
	case 243:
		//line sql.y:1167
		{
			yyVAL.boolVal = true
		}
	case 244:
		//line sql.y:1170
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		//line sql.y:1172
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		//line sql.y:1176
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		//line sql.y:1178
		{
			yyVAL.empty = struct{}{}
		}
	case 248:
		//line sql.y:1180
		{
			yyVAL.empty = struct{}{}
		}
	case 249:
		//line sql.y:1182
		{
			yyVAL.empty = struct{}{}
		}
	case 250:
		//line sql.y:1184
		{
			yyVAL.empty = struct{}{}
		}
	case 251:
		//line sql.y:1187
		{
			yyVAL.empty = struct{}{}
		}
	case 252:
		//line sql.y:1189
		{
			yyVAL.empty = struct{}{}
		}
	case 253:
		//line sql.y:1192
		{
			yyVAL.boolVal = false
		}
	case 254:
		//line sql.y:1194
		{
			yyVAL.boolVal = true
		}
	case 255:
		//line sql.y:1197
		{
			yyVAL.intVal = 0
		}
	case 256:
		//line sql.y:1199
		{
			yyVAL.intVal = yyS[yypt-1].intVal
		}
	case 257:
		//line sql.y:1203
		{
			i, ok := parseInt(yylex, yyS[yypt-0].str)
			if !ok {
				return 1
			}
			yyVAL.intVal = i
		}
	case 258:
		//line sql.y:1212
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = 0, 0
		}
	case 259:
		//line sql.y:1214
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = yyS[yypt-3].intVal, yyS[yypt-1].intVal
		}
	case 260:
		//line sql.y:1217
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = 0, 0
		}
	case 261:
		//line sql.y:1219
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = yyS[yypt-2].intVal, yyS[yypt-1].intVal
		}
	case 262:
		//line sql.y:1222
		{
			yyVAL.intVal = 0
		}
	case 263:
		//line sql.y:1224
		{
			yyVAL.intVal = yyS[yypt-0].intVal
		}
	case 264:
		//line sql.y:1227
		{
			yyVAL.boolVal = false
		}
	case 265:
		//line sql.y:1229
		{
			yyVAL.boolVal = true
		}
	case 266:
		//line sql.y:1232
		{
			yyVAL.empty = struct{}{}
		}
	case 267:
		//line sql.y:1234
		{
			yyVAL.empty = struct{}{}
		}
	case 268:
		//line sql.y:1237
		{
			yyVAL.str = ""
		}
	case 269:
		//line sql.y:1239
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 270:
		//line sql.y:1243
		{
			yyVAL.str = strings.ToLower(yyS[yypt-0].str)
		}
	case 271:
		//line sql.y:1246
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
